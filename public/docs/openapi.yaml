openapi: 3.0.0
info:
  title: GoRest API Wrapper (Aplicativo teste InicieED)
  description: Teste para desenvolvedor PHP (Laravel) - InicieED
  version: 1.0.0

servers:
  - url: 'https://localhost:8000'
    description: Endereço do Container Web

paths:
  /users:
    post:
      summary: Criar novo Usuário
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                gender:
                  type: string
                  enum:
                    - male
                    - female
                status:
                  type: string
                  enum:
                    - active
                    - inactive
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Recuperar todos os Usuários
      operationId: getUsers
      responses:
        '200':
          description: Users retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Recuperar Usuário por ID
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /public-posts:
    get:
      summary: Recuperar Posts Públicos
      operationId: getPublicPosts
      responses:
        '200':
          description: Public posts retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /users/{id}/posts:
    post:
      summary: Criar um post para um usuário
      operationId: createUserPost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
      responses:
        '200':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Recuperar todos os posts de um usuário
      operationId: getUserPosts
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User posts retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#
                items:
                  $ref: '#/components/schemas/Post'

  /posts/{id}/comments:
    post:
      summary: Criar um comentário para um post
      operationId: createPostComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                body:
                  type: string
      responses:
        '200':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}:
    delete:
      summary: Deletar um post por ID
      operationId: deletePost
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{id}:
    delete:
      summary: Excluir um comentário por ID
      operationId: deleteComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: Comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        gender:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        body:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        body:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        message:
          type: string

    Error:
      type: object
      properties:
        error:
          type: string
